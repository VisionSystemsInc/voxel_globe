from django.contrib.gis.db import models
import json;

# Create your models here.

PIXEL_FORMATS = (('f', 'Float'), ('d', 'Double'), ('q', 'Quadruple'), 
                 ('b', 'Byte 8'), ('s', 'Short 16'), 
                 ('i', 'Integer 32'), ('l', 'Long Integer 64'));

class Parameters:
  def __init__(self, params=None, fromStr=None):
    if fromStr:
      params = json.loads(fromStr);
    self.params = params;
  def __str__(self):
    return json.dumps(self.params)

class WorkflowInstance(models.Model):
  name = models.TextField();

  def __unicode__(self):
    return '%s[%s]' % (self.name, self.id)

class ServiceInstance(models.Model):
  workflow = models.ForeignKey('WorkflowInstance', blank=True, null=True);
  inputs = models.TextField('Inputs');
  outputs = models.TextField('Outputs');
  
  user = models.CharField(max_length=32);
  entryTime = models.DateTimeField(auto_now_add = True);
  finishTime = models.DateTimeField(auto_now = True); 
  
  status = models.CharField(max_length=32);
  
  serviceName = models.CharField(max_length=128);
  
  def __unicode__(self):
    return '%s' % self.id

#Abtract common model
class commonModel(models.Model):
  service = models.ForeignKey('ServiceInstance');
  name = models.TextField();

  class Meta:
    abstract = True

  @classmethod
  def getProvenance(self):
    s = ''
    if self.serviceID.workFlowID:
      s += 'Workflow %s [%s]' % (self.serviceID.workflow.name, self.service.workflow.id)
    if self.serviceID:
      s += 'Generated by %s [%s]\n' % (self.service.taskID, self.service.id)
      s += '  Inputs: %s\n' % str(self.service.inputs)
      s += '  Outputs: %s\n' % str(self.service.outputs)
    else:
      s += 'Unknown provenance'
    return s;
  
  # Returns the string representation of the model. Documentation says I 
  #need to do this. __unicode__ on Python 2
  def __unicode__(self):
    return self.name;

class ImageCollection(commonModel):
  images = models.ManyToManyField('Image');

class Image(commonModel):
  fileFormat = models.CharField(max_length=4);
  pixelFormat = models.CharField(max_length=1, choices=PIXEL_FORMATS);
  imageWidth = models.IntegerField('Image Width (pixels)');
  imageHeight = models.IntegerField('Image Height (pixels)');
  numberColorBands = models.IntegerField('Number of Color Bands');
  imageURL = models.TextField(unique=True);

  #@classmethod
  #Forces everything that is needed to be defined???
  #def create(self, name, fileFormat, pixelFormat, imageWidth, imageHeight, numberColorBands, imgURL):
  #  return Image(name=name, fileFormat=fileFormat, pixelFormat=pixelFormat,
  #               imageWidth=imageWidth, imageHeight=imageHeight, 
  #               numberColorBands=numberColorBands, imgURL=imgURL)


class ImageTiePoint(commonModel):
  #description = models.CharField(max_length=250)
  x = models.FloatField()
  y = models.FloatField()

  userCorrected = models.IntegerField('User Correction', default=0);
    
  image = models.ForeignKey('Image', blank=False)
  geoPoint = models.ForeignKey('GeoTiePoint', null=True, blank=True)

class GeoTiePoint(commonModel):
  description = models.TextField()
    
  latitude = models.FloatField()
  longitude = models.FloatField()
  altitude = models.FloatField()
    
  apparentLatitude = models.FloatField()
  apparentLongitude = models.FloatField()
  apparentAltitude = models.FloatField()

