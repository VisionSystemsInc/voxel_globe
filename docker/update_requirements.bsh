#!/usr/bin/env bash

set -eu

source ${VIP_VSI_DIR}/linux/ask_question.sh

if [ "$(id -u)" == "0" ]; then
  apt-get update
  apt-get install -y ca-certificates wget --no-install-recommends
  exec /celery_entrypoint.bsh "$0" "${@}"
fi

#comma separated list of binary only packages
PIP_BINARY_ONLY="entrypoints"

function name_version_from_filename()
{
  #Does not support optional build tag https://www.python.org/dev/peps/pep-0491/#file-name-convention
  package=$(basename $1)

  if [ "${package##*.}" == "whl" ]; then
    package=${package%.whl} #remove extension
    package=${package%-*} #remove platform tag
    package=${package%-*} #remove abi tag
    package=${package%-*} #remove language
  elif [ "${package##*.}" == "egg" ]; then
    #https://web.archive.org/web/20160412151120/http://pythonhosted.org/setuptools/formats.html
    package=${package%.egg} #remove extension
    package=${package%-*} #remove platform tag
    package=${package%-*} #remove language
  else
    #remove extensions
    #https://github.com/pypa/setuptools/blob/469be24cdfec5fd1bc7aed4522910a19c1126e30/setuptools/package_index.py#L41
    #https://github.com/pypa/pip/blob/281eb61b09d87765d7c2b92f6982b3fe76ccb0af/pip/_vendor/distlib/util.py#L1047
    #https://github.com/pypa/pip/blob/281eb61b09d87765d7c2b92f6982b3fe76ccb0af/pip/_vendor/distlib/locators.py#L87
    #https://github.com/pypa/pip/blob/281eb61b09d87765d7c2b92f6982b3fe76ccb0af/pip/utils/__init__.py#L52
    package=${package%.gz}
    package=${package%.bz2}
    package=${package%.xy}
    package=${package%.lz}
    package=${package%.lzma}
    package=${package%.tgz}
    package=${package%.tbz}
    package=${package%.tlz}
    package=${package%.txz}
    package=${package%.tar}
    package=${package%.zip}
  fi
  version=${package##*-} #get version
  package=${package%-*} #get distribution name
}

function get_filenames()
{
  pip download -d /tmp "${@}" --no-binary :all: --only-binary "${PIP_BINARY_ONLY}" | \
    tee >(cat 1>&2) | \
    #this is a nasty tee hack due to https://github.com/docker/docker/issues/6880
    grep -E '^  Downloading|^  File was already downloaded' | \
    sed 's| ([^()]*)||' | \
    awk '{print $NF}'
}

#Thanks cffi for this :(
if ! command -v x86_64-linux-gnu-gcc > /dev/null; then
  cp /bin/true /tmp/x86_64-linux-gnu-gcc
  export PATH="${PATH}:/tmp"
fi

#I do NOT use the --pre option for any of the pip commands, so pre-releases are
#not considered. The easiest way to add a pre-release is to use the custom
#requirements file

function update_main_requirements()
{
  : > "$1.new"
  while IFS='' read -r line || [[ -n "$line" ]]; do
    main_package="${line%%==*}"
    for filename in $(get_filenames ${main_package} --no-deps); do
      name_version_from_filename "${filename}"
      echo "${main_package}==${version}" >> "$1.new"
    done
  done < "$1"

  #Can't use wc -l here cause its buggy with blank lines, counting "newlines" not lines
  if [ "$(grep -cv '^\s*$' "$1")" == \
       "$(grep -cv '^\s*$' "$1.new")" ]; then
    mv -f "$1.new" "$1"
  else
    echo "Something went wrong"
    exit 1
  fi
}

function update_derived_requirements()
{ # main_requirements.txt custom_requirements.txt derived_requirements.txt
  echo "#Autogenerated file. Please run just update-python-requirements to update" > "$3"

  #Does not support one dependency depending on another when both in the custom list.
  if [ -f $2 ]; then
    while IFS='' read -r line || [[ -n "$line" ]]; do
      name_version_from_filename $line
      custom_package="${package}"
      echo $line >> "$3"
      for filename in $(get_filenames "${line}"); do
        name_version_from_filename "${filename}"
        if [ "${package}" != "${custom_package}" ]; then
          echo "${package}==${version}" >> "$3"
        fi
      done
    done < "$2"
  fi

  for filename in $(get_filenames -r "$1"); do
    name_version_from_filename "${filename}"
    echo "${package}==${version}" >> "$3"
  done
}

files=(common flower uwsgi nginx notebook_1 notebook_2)
files=(notebook_2)

for f in "${files[@]}"; do
  update_main_requirements "${VIP_PROJECT_DIR}/docker/requirements_${f}.txt"
done

for f in "${files[@]}"; do
  echo "### ${f} ###"
  cat "${VIP_PROJECT_DIR}/docker/requirements_${f}.txt"
done

echo "(Hint: You can edit the files before saying yes)"
ask_question "Do these requirements look ok?" requirements "y"
if [ "${requirements}" == "0" ]; then
  exit 1
fi

for f in "${files[@]}"; do
  update_derived_requirements "${VIP_PROJECT_DIR}/docker/requirements_${f}.txt" \
                              "${VIP_PROJECT_DIR}/docker/requirements_${f}_custom.txt" \
                              "${VIP_PROJECT_DIR}/docker/requirements_${f}_derived.txt"
done