#!/usr/bin/env bash

set -eu

function name_version_from_filename()
{
  package=$(basename $1)
  package=${package%.gz}
  package=${package%.bz2}
  package=${package%.tar}
  package=${package%.zip}
  version=${package##*-}
  package=${package%-*}
}

function get_filenames()
{
  pip download -d /tmp "${@}" --no-binary :all: | \
    tee >(cat 1>&2) | \
    #this is a nasty hack due to https://github.com/docker/docker/issues/6880
    grep -E '^  Downloading|^  File was already downloaded' | \
    sed 's| ([^()]*)||' | \
    awk '{print $NF}'
}

#Thanks cffi for this :(
if [ ! command -v x86_64-linux-gnu-gcc > /dev/null ]; then
  cp /bin/true /tmp/x86_64-linux-gnu-gcc
  export PATH="${PATH}:/tmp"

#I do NOT use the --pre option for any of the pip commands, so pre-releases are
#not considered. The easiest way to add a pre-release is to use the custom
#requirements file

update_main_requirements()
{
  : > "$1.new"
  while IFS='' read -r line || [[ -n "$line" ]]; do
    main_package="${line%%==*}"
    for filename in $(get_filenames ${main_package} --no-deps); do
      name_version_from_filename "${filename}"
      echo "${main_package}==${version}" >> "$1.new"
    done
  done < "$1"

  #Can't use wc -l here cause its buggy with blank lines, counting "newlines" not lines
  if [ "$(grep -cv '^\s*$' "$1")" == \
       "$(grep -cv '^\s*$' "$1.new")" ]; then"
    mv -f "$1.new" "$1"
  else
    echo "Something went wrong"
    exit 1
  fi
}

update_derived_requirements()
{ # main_requirements.txt custom_requirements.txt derived_requirements.txt
  : > "$3"

  #Does not support one dependency depending on another when both in the custom list.
  while IFS='' read -r line || [[ -n "$line" ]]; do
    name_version_from_filename $line
    custom_package="${package}"
    echo $line >> "$3"
    for filename in $(get_filenames "${line}"); do
      name_version_from_filename "${filename}"
      if [ "${package}" != "${custom_package}" ]; then
        echo "${package}==${version}" >> "$3"
      fi
    done
  done < "$2"

  for filename in $(get_filenames -r "$1"); do
    name_version_from_filename "${filename}"
    echo "${package}==${version}" >> "$3"
  done
}

if [ "$1" == "main" ]; then
  update_main_requirements /opt/vip/docker/requirements_common.txt
  update_main_requirements /opt/vip/docker/requirements_flower.txt
  update_main_requirements /opt/vip/docker/requirements_uwsgi.txt
else
  update_derived_requirements /opt/vip/docker/requirements_common.txt \
                              /opt/vip/docker/requirements_custom_common.txt \
                              /opt/vip/docker/requirements_common_derived.txt
  update_derived_requirements /opt/vip/docker/requirements_flower.txt \
                              /dev/null \
                              /opt/vip/docker/requirements_flower_derived.txt
  update_derived_requirements /opt/vip/docker/requirements_uwsgi.txt \
                              /dev/null \
                              /opt/vip/docker/requirements_uwsgi_derived.txt
fi