#!/usr/bin/env bash
#J.U.S.T. - J.U.S.T. uncomplicated simple tasking

set -eu

CURDIR=$(cd $(dirname ${BASH_SOURCE[0]}); pwd)

source ${CURDIR}/../vip.bsh

DOCKER=docker
: ${DRYRUN=0}

if [ "${DRYRUN}" != "0" ]; then
  DOCKER="echo docker"
fi

: ${IMAGE_NAME=voxel_globe}
: ${IMAGE_NAME_DEV=voxel_globe_dev}

DOCKER_USER=andyneff
DOCKER_REPO=voxel_globe

: ${IMAGE_DIR_HOST=${CURDIR}/../data/images}
: ${IMAGE_DIR_DOCK=/images}
: ${STORAGE_DIR_HOST=${CURDIR}/../data/storage}
: ${STORAGE_DIR_DOCK=/storage}

: ${VIP_DIR_HOST=$(cd ${CURDIR}/..; pwd)}
: ${VIP_DIR_DOCK=/opt/vip}

: ${HTTPS_PORT_HOST=8443}
: ${HTTPS_PORT_DOCK=443}
: ${NOTEBOOK_PORT_HOST=9999}
: ${NOTEBOOK_PORT_DOCK=9999}

: ${POSTGRES_IMAGE_NAME=${DOCKER_USER}/${DOCKER_REPO}:postgresql}
: ${POSTGRES_CONTAINER_NAME=vip_postgresql}
: ${POSTGRES_DIR_DOCK=/var/lib/postgresql/data}

: ${RABBITMQ_IMAGE_NAME=${DOCKER_USER}/${DOCKER_REPO}:rabbitmq}
: ${RABBITMQ_CONTAINER_NAME=vip_rabbitmq}
: ${RABBITMQ_VOLUME_NAME=vip_rabbitmq}

: ${HTTPD_IMAGE_NAME=${DOCKER_USER}/${DOCKER_REPO}:httpd}
: ${HTTPD_CONTAINER_NAME=vip_httpd}

: ${CELERY_IMAGE_NAME=${DOCKER_USER}/${DOCKER_REPO}:celery}
: ${CELERY_CONTAINER_NAME=vip_celery}

: ${FLOWER_IMAGE_NAME=${DOCKER_USER}/${DOCKER_REPO}:flower}
: ${FLOWER_CONTAINER_NAME=vip_flower}
: ${FLOWER_HOST_PORT=5555}
: ${FLOWER_DOCK_PORT=5555}

: ${NOTEBOOK_IMAGE_NAME=${DOCKER_USER}/${DOCKER_REPO}:notebook}
: ${NOTEBOOK_CONTAINER_NAME=vip_notebook}
: ${NOTEBOOK_HOST_PORT=9999}
: ${NOTEBOOK_DOCK_PORT=8888}
: ${NOTEBOOK_DOCK_DIR=/notebooks}
: ${NOTEBOOK_HOST_DIR=/opt/users/andy/projects/notebooks/} #HARD CODE until vip.bsh is used
: ${NOTEBOOK_CONFIG_DOCK_DIR=/profile/nbconfig}
: ${NOTEBOOK_CONFIG_HOST_DIR=${NOTEBOOK_HOST_DIR}/.config}
: ${NOTEBOOK_CUSTOM_DOCK_DIR=/profile/custom}
: ${NOTEBOOK_CUSTOM_HOST_DIR=${NOTEBOOK_HOST_DIR}/.custom}
: ${NOTEBOOK_MPL_VOLUME=vip_matplotlib}
: ${NOTEBOOK_MPL_DIR=/matplotlib}

: ${COMMON_IMAGE_NAME=${DOCKER_USER}/${DOCKER_REPO}:common}

: ${VXL_IMAGE_NAME=${DOCKER_USER}/${DOCKER_REPO}:vxl}
: ${VXL_CONTAINER_NAME=vip_vxl}

: ${VIP_VXL_BUILD_TYPE=Release}

: ${VIP_JUST_DELETE_VOLUME_ON_RESET=1}


#List of images to push/pull
DOCKERHUB_IMAGE_NAMES=(${POSTGRES_IMAGE_NAME} ${RABBITMQ_IMAGE_NAME} ${CELERY_IMAGE_NAME} ${HTTPD_IMAGE_NAME} ${FLOWER_IMAGE_NAME} ${NOTEBOOK_IMAGE_NAME} ${VXL_IMAGE_NAME})

#These must have the same order
CONTAINER_NAMES=(${POSTGRES_CONTAINER_NAME} ${RABBITMQ_CONTAINER_NAME} ${CELERY_CONTAINER_NAME} ${HTTPD_CONTAINER_NAME} ${FLOWER_CONTAINER_NAME})
SERVICE_NAMES=(postgresql rabbitmq celery httpd flower)

CONTAINER_NAMES+=(${NOTEBOOK_CONTAINER_NAME})
SERVICE_NAMES+=(notebook)

function s2c()
{
  local i
  for i in "${!SERVICE_NAMES[@]}"; do
    if [ "${SERVICE_NAMES[$i]}" == "$1" ]; then
      echo ${CONTAINER_NAMES[$i]}
    fi
  done
}

function docker_create_volume()
{
  if docker volume inspect "$1" > /dev/null 2>&1; then
    if [ "${VIP_JUST_DELETE_VOLUME_ON_RESET}" == "1" ]; then
      ${DOCKER} volume rm $1
    else
      return 0
    fi
  fi
  docker volume create --name $1
}

: ${VIP_DOCKER_NETWORK=voxel_globe}

: ${VIP_VXL_VOLUME=voxel_globe_vxl}

: ${CUDA_VERSION=$(/usr/local/cuda/bin/nvcc --version 2>/dev/null | tail -n 1 | awk '{print substr($(NF),2)}')} #'
: ${NVIDIA_VERSION=$(nvidia-smi -q 2>/dev/null | grep 'Driver Version' | awk -F': ' '{print $2}')} #'
: ${NVIDIA_VOLUME_NAME=nvidia_driver_${NVIDIA_VERSION}}

OS=$(uname)

RUN_ARGS=()
BUILD_ARGS=()

WIN= #Ming/cygwin hack

if [ "${OS}" == "Linux" ]; then
  RUN_ARGS+=(-v ${NVIDIA_VOLUME_NAME}:/usr/local/nvidia:ro
             $(ls /dev/nvidia* | sed 's|^|--device |')
             -v /tmp/.X11-unix:/tmp/.X11-unix
             -e DISPLAY=${DISPLAY}
             -e VIP_INITIALIZE_DATABASE_CONFIRM=0)
else
  if [ "${OS}" != "Darwin" ]; then #Assume windows
    WIN='/' #Ming/cygwin hack
  fi
  RUN_ARGS+=(-e VIP_OPENCL_INCLUDE_PATH=${WIN}/opt/AMDAPPSDK-3.0/include
             -e VIP_OPENCL_LIBRARY_FLAGS="-L${WIN}/opt/AMDAPPSDK-3.0/lib/x86_64/sdk -lOpenCL"
             -e VIP_OPENCL_LIBRARY_NAME=OpenCL
             -e VIP_OPENCL_LIBRARY_PATH=${WIN}/opt/AMDAPPSDK-3.0/lib/x86_64/sdk
             -e VIP_SKIP_SIFTGPU=1
             -e VIP_INITIALIZE_DATABASE_CONFIRM=0)
fi

RUN_ARGS+=()

function is_service()
{
  if (( $# > 0 )) && echo "${SERVICE_NAMES[@]}" | grep -q -w "$1"; then
    return 0
  fi
  return 1
}

while (( $# > 0 )); do
  just_arg=$1
  shift 1

  # AFTER_ARGS=()

  # if (( $# > 0 )) && [ "$1" == "--" ]; then
  #   shift 1
  #   while (( $# > 0 )); do
  #     if [ "$1" == '**' ]; then
  #       shift 1
  #       break
  #     fi
  #     AFTER_ARGS+=($1)
  #     shift 1
  #   done
  # fi

  case ${just_arg} in
    build)
      if is_service "${@}"; then
        while is_service "${@}"; do
          $0 build_$1
          shift 1
        done
        continue
      fi

      $0 build_vxl build "${SERVICE_NAMES[@]}"

      ;;
    build_postgresql)
      ${DOCKER} build ${BUILD_ARGS[@]+"${BUILD_ARGS[@]}"} \
                   -t ${POSTGRES_IMAGE_NAME} \
                   -f ${CURDIR}/postgresql.Dockerfile ${CURDIR}
      ;; #"
    build_rabbitmq)
      ${DOCKER} build ${BUILD_ARGS[@]+"${BUILD_ARGS[@]}"} \
                   -t ${RABBITMQ_IMAGE_NAME} \
                   -f ${CURDIR}/rabbitmq.Dockerfile ${CURDIR}
      ;; #"
    build_celery)
      ${DOCKER} build ${BUILD_ARGS[@]+"${BUILD_ARGS[@]}"} \
                   -t ${COMMON_IMAGE_NAME} \
                   -f ${CURDIR}/common.Dockerfile ${CURDIR}
      ${DOCKER} build ${BUILD_ARGS[@]+"${BUILD_ARGS[@]}"} \
                   -t ${CELERY_IMAGE_NAME} \
                   -f ${CURDIR}/celery.Dockerfile ${CURDIR}
      ;;
    build_httpd)
      ${DOCKER} build ${BUILD_ARGS[@]+"${BUILD_ARGS[@]}"} \
                   -t ${COMMON_IMAGE_NAME} \
                   -f ${CURDIR}/common.Dockerfile ${CURDIR}
      ${DOCKER} build ${BUILD_ARGS[@]+"${BUILD_ARGS[@]}"} \
                   -t ${HTTPD_IMAGE_NAME} \
                   -f ${CURDIR}/httpd.Dockerfile ${CURDIR}
      ;;
    build_vxl)
      ${DOCKER} build ${BUILD_ARGS[@]+"${BUILD_ARGS[@]}"} \
                   -t ${VXL_IMAGE_NAME} \
                   -f ${CURDIR}/vxl.Dockerfile ${CURDIR}
      ;; #"
    build_flower)
      ${DOCKER} build ${BUILD_ARGS[@]+"${BUILD_ARGS[@]}"} \
                   -t ${FLOWER_IMAGE_NAME} \
                   -f ${CURDIR}/flower.Dockerfile ${CURDIR}
      ;; #"
    build_notebook)
      ${DOCKER} build ${BUILD_ARGS[@]+"${BUILD_ARGS[@]}"} \
                   -t ${COMMON_IMAGE_NAME} \
                   -f ${CURDIR}/common.Dockerfile ${CURDIR}
      ${DOCKER} build ${BUILD_ARGS[@]+"${BUILD_ARGS[@]}"} \
                   -t ${NOTEBOOK_IMAGE_NAME} \
                   -f ${CURDIR}/notebook.Dockerfile ${CURDIR}
      ;; #"


    start)
      if is_service "${@}"; then
        while is_service "${@}"; do
          status=$(docker inspect --type=container -f "{{.State.Status}}" $(s2c $1) 2>/dev/null || :)
          if [ "${status}" == "running" ]; then
            echo "$1 is already running"
          else
            if [ "${status}" == "created" ]; then
              ${DOCKER} rm $(s2c $1)
            fi
            $0 clean_$1 start_$1
          fi
          shift 1
        done
      else #else start them ALL!
        $0 network start ${SERVICE_NAMES[@]}
      fi
      ;;
    start_postgresql)
      RUN_ARGS=(-v ${VIP_POSTGRESQL_DATABASE}:${WIN}${POSTGRES_DIR_DOCK})
      if [ "${VIP_POSTGRESQL_PUBLISH}" == "1" ]; then
        RUN_ARGS+=(-p 5432:5432)
      fi
      ${DOCKER} run -d "${RUN_ARGS[@]}" \
                 --name ${POSTGRES_CONTAINER_NAME} \
                 --net ${VIP_DOCKER_NETWORK} \
                 ${POSTGRES_IMAGE_NAME}
                 #-e POSTGRES_PASSWORD=password
      ;;
    start_rabbitmq)
      ${DOCKER} run -d -v ${RABBITMQ_VOLUME_NAME}:${WIN}/var/lib/rabbitmq \
                 --name ${RABBITMQ_CONTAINER_NAME} \
                 --net ${VIP_DOCKER_NETWORK} \
                 ${RABBITMQ_IMAGE_NAME}
      ;;
    start_httpd)
      ${DOCKER} run -d \
                 -v ${VIP_DIR_HOST}:${WIN}${VIP_DIR_DOCK} \
                 -v ${VIP_CONF_DIR}:${WIN}/usr/local/apache2/conf \
                 -v ${IMAGE_DIR_HOST}:${WIN}${IMAGE_DIR_DOCK} \
                 -v ${STORAGE_DIR_HOST}:${WIN}${STORAGE_DIR_DOCK} \
                 -v ${VIP_VXL_VOLUME}:/vxl \
                 --name ${HTTPD_CONTAINER_NAME} \
                 --net ${VIP_DOCKER_NETWORK} \
                 -p ${HTTPS_PORT_HOST}:${HTTPS_PORT_DOCK} \
                 -e VIP_OPENCL_DEVICE=cpu0 \
                 -e VIP_IMAGE_DIR=${WIN}${IMAGE_DIR_DOCK} \
                 -e VIP_STORAGE_DIR=${WIN}${STORAGE_DIR_DOCK} \
                 -e USER_ID=$(id -u) \
                 -e GROUP_ID=$(id -g) \
                 ${HTTPD_IMAGE_NAME}
      ;;
    start_celery)
      #TODO make start multiple nodes
      ${DOCKER} run -d \
                 -v ${VIP_DIR_HOST}:${WIN}${VIP_DIR_DOCK} \
                 -v ${IMAGE_DIR_HOST}:${WIN}${IMAGE_DIR_DOCK} \
                 -v ${STORAGE_DIR_HOST}:${WIN}${STORAGE_DIR_DOCK} \
                 -v ${VIP_VXL_VOLUME}:/vxl \
                 -e VIP_IMAGE_DIR=${WIN}${IMAGE_DIR_DOCK} \
                 -e VIP_STORAGE_DIR=${WIN}${STORAGE_DIR_DOCK} \
                 -e USER_ID=$(id -u) \
                 -e GROUP_ID=$(id -g) \
                 --name ${CELERY_CONTAINER_NAME} \
                 --net ${VIP_DOCKER_NETWORK} \
                 --hostname ${VIP_CELERY_DEFAULT_NODES} \
                 ${CELERY_IMAGE_NAME}
      ;;
    start_flower)
      ${DOCKER} run -d \
                 -v ${VIP_DIR_HOST}:${WIN}${VIP_DIR_DOCK} \
                 --name ${FLOWER_CONTAINER_NAME} \
                 --net ${VIP_DOCKER_NETWORK} \
                 -p ${FLOWER_HOST_PORT}:${FLOWER_DOCK_PORT} \
                 ${FLOWER_IMAGE_NAME}
      ;;
    start_notebook)
      ${DOCKER} run -d \
                 -v ${VIP_DIR_HOST}:${WIN}${VIP_DIR_DOCK} \
                 -v ${IMAGE_DIR_HOST}:${WIN}${IMAGE_DIR_DOCK} \
                 -v ${STORAGE_DIR_HOST}:${WIN}${STORAGE_DIR_DOCK} \
                 -v ${VIP_VXL_VOLUME}:/vxl \
                 -v ${VIP_DIR_HOST}/external/vxl_src:/vxl_src \
                 -v ${NOTEBOOK_HOST_DIR}:${NOTEBOOK_DOCK_DIR} \
                 -v ${NOTEBOOK_CONFIG_HOST_DIR}:${NOTEBOOK_CONFIG_DOCK_DIR} \
                 -v ${NOTEBOOK_CUSTOM_HOST_DIR}:${NOTEBOOK_CUSTOM_DOCK_DIR} \
                 -v ${NOTEBOOK_MPL_VOLUME}:${NOTEBOOK_MPL_DIR} \
                 --name ${NOTEBOOK_CONTAINER_NAME} \
                 --net ${VIP_DOCKER_NETWORK} \
                 -p ${NOTEBOOK_HOST_PORT}:${NOTEBOOK_DOCK_PORT} \
                 -e USER_ID=$(id -u) \
                 -e GROUP_ID=$(id -g) \
                 -e VIP_IMAGE_DIR=${WIN}${IMAGE_DIR_DOCK} \
                 -e VIP_STORAGE_DIR=${WIN}${STORAGE_DIR_DOCK} \
                 ${NOTEBOOK_IMAGE_NAME}
      ;;


    stop)
      if is_service "${@}"; then
        while is_service "${@}"; do
          $0 stop_$1
          shift 1
        done
        continue
      fi

      #stop them ALL! (in reverse order
      for (( idx=${#SERVICE_NAMES[@]}-1 ; idx>=0 ; idx-- )) ; do
        $0 stop "${SERVICE_NAMES[idx]}" || :
      done
      ;;
    stop_postgresql)
      # || : because 1) you WANT them all to run, and 2) pg_ctl doens't return 0
      ${DOCKER} exec ${POSTGRES_CONTAINER_NAME} gosu postgres pg_ctl stop || :
      echo
      ;;
    stop_rabbitmq)
      ${DOCKER} exec ${RABBITMQ_CONTAINER_NAME} rabbitmqctl stop || :
      ;;
    stop_httpd)
      ${DOCKER} exec ${HTTPD_CONTAINER_NAME} bash -c "/opt/vip/wrap /usr/local/apache2/bin/httpd -k graceful-stop" || :
      ;;
    stop_celery)
      ${DOCKER} exec ${CELERY_CONTAINER_NAME} bash -c 'cd /home/user && celery multi stop ${NODE_NAME}' || :
      ;;
    stop_*)
      ${DOCKER} stop "$(s2c ${just_arg#*_})" || :
      ;;


    wait)
      if is_service "${@}"; then
        while is_service "${@}"; do
          $0 wait_$1
          shift 1
        done
        continue
      fi
      ${DOCKER} wait "${CONTAINER_NAMES[@]}"
      ;;
    wait_*)
      ${DOCKER} wait "$(s2c ${just_arg#*_})"
      ;;


    full-restart)
      if is_service "${@}"; then
        while is_service "${@}"; do
          $0 full-restart_$1
          shift 1
        done
        continue
      fi

      $0 stop wait start
      ;;
    full-restart_*)
      $0 stop ${just_arg#*_} wait ${just_arg#*_} start ${just_arg#*_}
      ;;
    restart)
      if is_service "${@}"; then
        while is_service "${@}"; do
          $0 restart_$1
          shift 1
        done
        continue
      fi
      $0 stop flower celery rabbitmq postgresql
      ${DOCKER} wait ${POSTGRES_CONTAINER_NAME} ${RABBITMQ_CONTAINER_NAME} ${CELERY_CONTAINER_NAME} ${FLOWER_CONTAINER_NAME}
      $0 start postgresql rabbitmq celery flower restart_httpd
      ;;
    restart_httpd)
      ${DOCKER} exec ${HTTPD_CONTAINER_NAME} bash -c "/opt/vip/wrap /usr/local/apache2/bin/httpd -k graceful" || :
      ;;
    restart_*)
      $0 stop ${just_arg#*_}
      $0 wait ${just_arg#*_}
      $0 start ${just_arg#*_}
      ;;


    kill)
      ${DOCKER} kill "${CONTAINER_NAMES[@]}"
      ;;


    push)
      for image_name in "${DOCKERHUB_IMAGE_NAMES[@]}"; do
        ${DOCKER} push ${image_name}
      done
      ;;


    pull)
      for image_name in "${DOCKERHUB_IMAGE_NAMES[@]}"; do
        ${DOCKER} pull ${image_name}
      done
      ;;


    clean)
      if is_service "${@}"; then
        while is_service "${@}"; do
          $0 clean_$1
          shift 1
        done
        continue
      fi
      for name in "${SERVICE_NAMES[@]}"; do
        $0 clean_$name
      done
      ;;
    clean_*)
      if [ "$(docker inspect -f '{{.State.Status}}' --type container $(s2c ${just_arg#*_}) 2> /dev/null)" == "exited" ]; then
          ${DOCKER} rm $(s2c ${just_arg#*_})
      fi
      ;;


    log)
      function kill_logs()
      {
        for pid in "${LOG_PIDS[@]}"; do
          kill -9 $pid
        done
        echo #Ctrl+C doesn't have a newline
      }
      trap kill_logs INT
      LOG_PIDS=()
      for container_name in "${CONTAINER_NAMES[@]}"; do
        docker logs -f --tail=20 ${container_name} &
        LOG_PIDS+=($!)
      done
      wait "${LOG_PIDS[@]}"
      trap - INT
      ;;


    enter)
      if is_service "${@}"; then
        $0 enter_$1
        shift 1
        continue
      fi

      running_containers=()

      for image_name in "${DOCKERHUB_IMAGE_NAMES[@]}"; do
        running_containers+=($(docker ps --filter=ancestor=${image_name} --format="{{.Names}}"))
      done

      if (( ${#running_containers[@]} == 0 )); then
        echo "No containers running"
        exit 1
      elif (( ${#running_containers[@]} > 1)); then
        for c in $(seq 1 ${#running_containers[@]}); do
          echo "$c - ${running_containers[$(($c-1))]}"
        done
        read -r -p "Choose which container to enter: " cid
        container=${running_containers[$((${cid}-1))]}
      else
        container=${running_containers[0]}
      fi
      ${DOCKER} exec -it ${container} bash
      ;;
    enter_*)
      ${DOCKER} exec -it "$(s2c ${just_arg#*_})" bash -c  "echo 'import readline, rlcompleter; readline.parse_and_bind(\"tab: complete\")' > /tmp/.pyrc; exec env PYTHONSTARTUP=/tmp/.pyrc bash"
      ;;


    vxl)
      ${DOCKER} run -it --rm \
                 -v ${VIP_DIR_HOST}/external/vxl_src:/vxl_src \
                 -v ${VIP_VXL_VOLUME}:/vxl \
                 -e BUILD_TYPE=${VIP_VXL_BUILD_TYPE} \
                 ${VXL_IMAGE_NAME}
      ;;
    network) # combine with volume, init or something
      if ! docker network inspect ${VIP_DOCKER_NETWORK} > /dev/null 2>&1; then
        ${DOCKER} network create ${VIP_DOCKER_NETWORK}
      fi
      ;;
    setup)
      RUN_ARGS+=(-v ${VIP_DIR_HOST}:${WIN}${VIP_DIR_DOCK} \
                 --net ${VIP_DOCKER_NETWORK})

      mkdir -p ${IMAGE_DIR_HOST} ${STORAGE_DIR_HOST}

      #Start database, AND initialize for the first time probably
      $0 start postgresql

      #Initialize database
      ${DOCKER} run --rm "${RUN_ARGS[@]}" \
                    --net ${VIP_DOCKER_NETWORK} \
                    ${HTTPD_IMAGE_NAME} \
                    ${WIN}/opt/vip/data/initialize_database.py

      #deploy static file
      ${DOCKER} run --rm "${RUN_ARGS[@]}" \
                    --net ${VIP_DOCKER_NETWORK} \
                    --user $(id -u):$(id -g) \
                    ${HTTPD_IMAGE_NAME} \
                    ${WIN}/opt/vip/voxel_globe/static_common/deploy.bsh

      #Stop database
      $0 stop postgresql
      ;; #"
    reset-volume)
      if [ "${OS}" == "Linux" ]; then
        docker_create_volume ${NVIDIA_VOLUME_NAME}
        ${DOCKER} run --rm -v ${NVIDIA_VOLUME_NAME}:/nvidia -v /usr:/host:ro centos:7 bash -c \
          "mkdir /nvidia/{bin,lib64}; cp -a /host/bin/nvidia* /nvidia/bin && cp -ra /host/lib64/vdpau/* /host/lib64/nvidia/* /nvidia/lib64"
      fi

      for volume_name in ${RABBITMQ_VOLUME_NAME} ${VIP_VXL_VOLUME} ${NOTEBOOK_MPL_VOLUME}; do
        docker_create_volume ${volume_name}
      done

      if [ ! -d ${IMAGE_DIR_HOST} ]; then
        mkdir -p ${IMAGE_DIR_HOST}
        chmod 777 ${IMAGE_DIR_HOST}
      fi
      if [ ! -d ${STORAGE_DIR_HOST} ]; then
        mkdir -p ${STORAGE_DIR_HOST}
        chmod 777 ${STORAGE_DIR_HOST}
      fi
      ;;
    dev)
      ${DOCKER} run -it --rm \
                 --net ${VIP_DOCKER_NETWORK} \
                 -v ${VIP_DIR_HOST}:${WIN}${VIP_DIR_DOCK} \
                 -v ${VIP_VXL_VOLUME}:${WIN}/vxl \
                 ${HTTPD_IMAGE_NAME} /opt/vip/dev.bsh
      ;;
    ps)
      ${DOCKER} ps -a $(echo ${CONTAINER_NAMES[@]} | sed 's|\<|--filter=name=|g')
      ;;
    telnet)
      exec ${DOCKER} run -it --rm --net ${VIP_DOCKER_NETWORK} jess/telnet "${@}"
      ;;
    debug)
      exec ${DOCKER} run -it --rm --net ${VIP_DOCKER_NETWORK} \
                      -v ${RABBITMQ_VOLUME_NAME}:${WIN}/rabbitmq \
                      -v ${VIP_POSTGRESQL_DATABASE}:${WIN}/postgres \
                      -v ${IMAGE_DIR_HOST}:${WIN}${IMAGE_DIR_DOCK} \
                      -v ${STORAGE_DIR_HOST}:${WIN}${STORAGE_DIR_DOCK} \
                      -v ${VIP_DIR_HOST}:${WIN}${VIP_DIR_DOCK} \
                      -v ${VIP_DIR_HOST}/external/vxl_src:/vxl_src \
                      -v ${VIP_VXL_VOLUME}:${WIN}/vxl \
                      debian:jessie bash
      ;;
    start_manage)
      exec ${DOCKER} run -it --rm --net ${VIP_DOCKER_NETWORK} \
                 -v ${VIP_DIR_HOST}:${WIN}${VIP_DIR_DOCK} \
                 -v ${IMAGE_DIR_HOST}:${WIN}${IMAGE_DIR_DOCK} \
                 -v ${STORAGE_DIR_HOST}:${WIN}${STORAGE_DIR_DOCK} \
                 -v ${VIP_VXL_VOLUME}:/vxl \
                 -e VIP_IMAGE_DIR=${WIN}${IMAGE_DIR_DOCK} \
                 -e VIP_STORAGE_DIR=${WIN}${STORAGE_DIR_DOCK} \
                 -e USER_ID=$(id -u) \
                 -e GROUP_ID=$(id -g) \
                 -p 8000:8000 \
                 ${HTTPD_IMAGE_NAME} bash -c "/opt/vip/voxel_globe/start_manage.bat $*"
      ;;
    *) echo "I don't understand ${just_arg}"; exit 1 ;;
  esac
done
